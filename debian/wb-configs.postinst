#!/bin/bash
. /usr/lib/wb-utils/wb_env.sh
wb_source "of"

# generate u-boot env config before config-package debheler
UBOOT_DIR="/usr/share/wb-configs/u-boot"
UBOOT_FNAME="fw_env.config.wb"
if of_machine_match "allwinner,sun50i-h616"; then
    FVER="sun50i"
elif of_machine_match "allwinner,sun8i-r40"; then
    FVER="sun8i"
elif of_machine_match "fsl,imx6ul" || of_machine_match "fsl,imx6ull"; then
    FVER="imx6"
elif of_machine_match "fsl,imx28" || of_machine_match "fsl,imx23"; then
    FVER="mxs"
else
    FVER="default"
fi
cp "${UBOOT_DIR}/${UBOOT_FNAME}.${FVER}" "/etc/${UBOOT_FNAME}"

ours=.wb
theirs=.wb-orig

# Remove diversion of sshd_configs from wb-configs which
# was accidently left unattended

# These functions are taken from config-package-dev heplers
# with modifications which allow to remove diversions from
# other packages
wb_undisplace_unlink_symlink()
{
    file="$1"
    ourfile="$2"
    theirfile="$3"
    if [ ! -L "$file" ] || \
	[ "$(readlink "$file")" != "$(basename "$ourfile")" -a \
	  "$(readlink "$file")" != "$(basename "$theirfile")" ]; then
	echo "*** OMINOUS WARNING ***: $file is not linked to either $(basename "$ourfile") or $(basename "$theirfile")" >&2
    else
	rm -f "$file"
    fi
}

wb_undisplace_unlink_displace()
{
    file="$1"
    if [ ! -L "$file" ] && [ ! -e "$file" ]; then
    echo "Run dpkg-divert --remove..."
	dpkg-divert --remove --rename "$file"
    else
	echo "Not removing diversion of $file by $package" >&2
    fi
}

wb_undisplace_unlink()
{
    prefix=$1
    suffix=$2

    file=$prefix$suffix
    ourfile=$prefix$ours$suffix
    theirfile=$prefix$theirs$suffix

    wb_undisplace_unlink_symlink "$file" "$ourfile" "$theirfile"
    wb_undisplace_unlink_displace "$file"
}

wb_check_undisplace_unlink_from()
{
    prefix=$1
    suffix=$2
    from_package=$3
    from_version=$4

    file=$prefix$suffix
    ourfile=$prefix$ours$suffix
    theirfile=$prefix$theirs$suffix

    if LC_ALL=C dpkg-divert --list "$from_package" | \
	grep -xFq "diversion of $file to $theirfile by $from_package" &&
    dpkg --compare-versions `dpkg-query -f '${Version}' -W "$from_package"` "lt" "$from_version"; then
        echo "Picking up diversion of $file from $package to replace it with our one"
	    wb_undisplace_unlink "$prefix" "$suffix" "$from_package"
    fi
}

if [ "$1" = "configure" ]; then
    wb_check_undisplace_unlink_from /etc/ssh/sshd_config "" wb-configs "1.75.4"

     if ! grep -qE '^[[:space:]]*(LANG|LC_ALL)=' /etc/default/locale 2>/dev/null; then
        echo "No locale set in /etc/default/locale. Setting en_US.UTF-8..."

        # Generate locale:
        locale-gen en_US.UTF-8 || true

        # Update locale settings in /etc/default/locale
        update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8
    else
        echo "Locale is already set, skipping..."
    fi
fi

#DEBHELPER#
. /etc/wb-prepare.d/01udev-rules # install hw-specific udev rules

if dpkg-query -s rsyslog >/dev/null 2>/dev/null; then
    rm -f /etc/logrotate.d/messages
fi

rm -f /etc/logrotate.d/rsyslog
rm -f /etc/update-motd.d/10-uname

# remove default Debian motd
if [[ -f /etc/motd ]] && [[ $(sha256sum /etc/motd | head -c 6) == 'a37897' ]]; then
    rm -f /etc/motd
    ln -s /var/run/motd /etc/motd
fi

deb-systemd-invoke reload nginx || true

# comment old patched mosquitto's `allow_anonymous_localhost` out
# or it will break new mosquitto launch
OPT_REGEX='^\s*\(allow_anonymous_localhost\)'
if grep -q -R --include=\*.conf "$OPT_REGEX" /etc/mosquitto/; then
    DEPR_MSG="allow_anonymous_localhost is deprecated, use per listener settings from mosquitto 2.0"
    echo "WARNING: $DEPR_MSG"
    find /etc/mosquitto/ -name '*.conf' \
        -exec grep -q '^\s*allow_anonymous_localhost' '{}' \; \
        -exec sed -i.wb-bak3 "s/${OPT_REGEX}/# ${DEPR_MSG}\n#\1/" '{}' \;
fi

# this flag may be created in preinst
MOSQUITTO_UPGRADE_FLAG=/var/lib/wirenboard/.mosquitto2-upgrade-restart-required

if [ -f $MOSQUITTO_UPGRADE_FLAG ]; then
    echo "mosquitto configs are updated, restarting mosquitto and all Wiren Board MQTT services"
    deb-systemd-invoke restart mosquitto
    rm $MOSQUITTO_UPGRADE_FLAG -rf
fi

deb-systemd-invoke restart rsyslog || true
deb-systemd-invoke start watchdog
deb-systemd-invoke restart systemd-journald

# remove transitional files left after 2.0~~transitional
if echo "$2" | grep '~~transitional' >/dev/null; then
    echo "Cleaning up transitional APT settings"
    rm -f /etc/apt/preferences.d/00wirenboard-release-transition-tmp
    rm -f /etc/apt/sources.list.d/wirenboard-release-transition-tmp.list
    rm -f /etc/update-motd.d/99wb-upgrade-transition-tmp

    echo "Generating new APT preferences according to installed release info"
    wb-release -r
fi

# nginx user should has rw access to fwupdate uploads dir
nginx_uploads_dir="/mnt/data/uploads"
nginx_user="www-data"
if [[ -d $nginx_uploads_dir ]] && $(id -u $nginx_user > /dev/null 2>&1); then
    echo "Setting ownership $nginx_user to $nginx_uploads_dir"
    chown -R $nginx_user:$nginx_user $nginx_uploads_dir
fi

# grant access fastcgi sripts to mosquitto's unix socket
chgrp mosquitto /run/mosquitto
chmod g+x /run/mosquitto
usermod -a -G mosquitto $nginx_user 
# restart fcgiwrap to apply group changes
deb-systemd-invoke restart fcgiwrap || true

nm_fixes() {
        local nm_connections=("/etc/NetworkManager/system-connections/wb-eth0.nmconnection"
                              "/etc/NetworkManager/system-connections/wb-eth1.nmconnection"
                              "/etc/NetworkManager/system-connections/wb-gsm-sim1.nmconnection"
                              "/etc/NetworkManager/system-connections/wb-gsm-sim2.nmconnection"
                              "/etc/NetworkManager/system-connections/wb-rndis.nmconnection")

        local connection_hashes=("d99be5a51292b10e558a37d5766c8859"  # wb-eth0.nmconnection
                                 "687766120810d07efd06d07b9995fdc1"  # wb-eth1.nmconnection
                                 "1bde0e56b5ab5d9fc79daae90840d2dd"  # wb-gsm-sim1.nmconnection
                                 "5303529f247a0e991898caa056da8d83"  # wb-gsm-sim2.nmconnection
                                 "6a36f2ea4321342c0156442c6bbf5d29") # wb-rndis.nmconnection

        # remove old default connections
        for cn in ${nm_connections[@]}; do
            if [ -f $cn ]; then
                local cn_calculated_hash=$(md5sum "$cn" | cut -f 1 -d ' ')
                for cn_hash in ${connection_hashes[@]}; do
                    if [ "$cn_calculated_hash" == "$cn_hash" ]; then
                        echo "Removing old default connection $cn"
                        rm -f $cn || true
                        break
                    fi
                done
            fi
        done

        # Wiren Board config for NetworkManager is now in /usr/lib/NetworkManager/conf.d/
        old_wb_conf="/etc/NetworkManager/conf.d/wb.conf"
        if [ -f $old_wb_conf ]; then
            local wb_conf_calculated_hash=$(md5sum "$old_wb_conf" | cut -f 1 -d ' ')
            if [ "$wb_conf_calculated_hash" == "e9f7aac3e4ff8fe00b8465958ec00da7" ]; then
                echo "Removing old $old_wb_conf"
                rm -f $old_wb_conf || true
            fi
        fi

        deb-systemd-invoke restart dnsmasq || true
        deb-systemd-invoke restart NetworkManager || true
}

# manually unsetting WBGSM_INTERACTIVE var for all ppp-peers to allow launch ppp-connection via pon/poff
ppp_peers_fixes()
{
    for fname in $(ls -d /etc/ppp/peers/*); do
        sed -i 's#"/usr/bin/wb-gsm\s#"WBGSM_INTERACTIVE= /usr/bin/wb-gsm #g' $fname
    done
}

nm_fixes
ppp_peers_fixes

add_mmc_mount_options(){
    awk '{ 
    EMMC_REGEX="^(\/dev\/mmcblk0p2|\/dev\/mmcblk0p5|\/dev\/mmcblk0p6)"
    TIME_OPTION_REGEX="(noatime|atime|relatime)"
    options=$4
    if ($1 ~ EMMC_REGEX){
       if (options !~ "(discard)")
          options="discard,"options;
       if (options !~ TIME_OPTION_REGEX)
          options="noatime,"options;
    }
    printf "%-20s %-20s %-10s %-70s %-10s %-10s\n", $1, $2, $3, options, $5, $6;
    }' /etc/fstab > /tmp/fstab_tmp

    mv /tmp/fstab_tmp /etc/fstab
}

add_mmc_mount_options

extended_rootfs_fix(){
    # If the system has been converted to a single large ROOTFS, 
    # the partition /dev/mmcblk0p6 no longer exists.
    FSTAB="/etc/fstab"
    PARTITION="/dev/mmcblk0p6"

    if [ -b "$PARTITION" ]; then
        echo "Partition $PARTITION exists. Uncommenting in $FSTAB."
        # Возвращаю свап на /dev/mmcblk0p5:
        sed -i 's|/dev/mmcblk0p3|/dev/mmcblk0p5|g' "$FSTAB"
        
        # Раскомментируею строку с /dev/mmcblk0p6, если она закомментирована:
        sed -i "\|^[[:space:]]*#\?[[:space:]]*$PARTITION|{s|^[[:space:]]*#\+[[:space:]]*||;t}" "$FSTAB"
    else
        echo "Partition $PARTITION not found. Commenting in $FSTAB."
        # Меняю свап с /dev/mmcblk0p5 на /dev/mmcblk0p3:
        sed -i 's|/dev/mmcblk0p5|/dev/mmcblk0p3|g' "$FSTAB"
        
        # Комментируем строку с /dev/mmcblk0p6 (если вдруг не закомментирована):
        sed -i "\|^[[:space:]]*#\?[[:space:]]*$PARTITION|{s|^[[:space:]]*#\+[[:space:]]*||;t;s|^|#|}" "$FSTAB"
    fi
}

extended_rootfs_fix

mosquitto_fixes()
{
    MOSQUITTO_CONF="/etc/mosquitto/mosquitto.conf"
    LISTENERS_CONF='/etc/mosquitto/conf.d/10listeners.conf'
    local restart_required=0
    if grep -q "log_dest file /var/log/mosquitto/mosquitto.log" $MOSQUITTO_CONF; then
        sed -i 's#log_dest file /var/log/mosquitto/mosquitto.log#log_dest syslog#' $MOSQUITTO_CONF
        restart_required=1
    fi
    if grep -q "pid_file /var/run/mosquitto.pid" $MOSQUITTO_CONF; then
        sed -i 's#pid_file /var/run/mosquitto.pid#pid_file /run/mosquitto/mosquitto.pid#' $MOSQUITTO_CONF
        restart_required=1
    fi
    if ! grep -q -F "include_dir /usr/share/wb-configs/mosquitto" $MOSQUITTO_CONF; then
        sed -i '\#include_dir /etc/mosquitto/conf.d#iinclude_dir /usr/share/wb-configs/mosquitto' $MOSQUITTO_CONF
        restart_required=1
    fi
    if grep -q "persistence .*" $MOSQUITTO_CONF; then
        sed -i 's@persistence .*@# persistence is disabled by default. enable in /etc/mosquitto/conf.d/000persistence.conf@' $MOSQUITTO_CONF
        restart_required=1
    fi
    if grep -q "^listener 18883$" $LISTENERS_CONF; then
    	sed -i '/^listener 18883$/clistener 18883 lo' $LISTENERS_CONF
    	restart_required=1
    fi
    if [ $restart_required -eq 1 ]; then
        if [ "$(deb-systemd-invoke is-enabled mosquitto)" != "masked" ]; then
            deb-systemd-invoke restart mosquitto
        else
            echo "Mosquitto is masked, skipping restart"
        fi
    fi

    /usr/lib/wb-configs/fix_mosquitto.sh
}

mosquitto_fixes
