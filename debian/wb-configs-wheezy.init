#!/bin/bash
### BEGIN INIT INFO
# Provides:          wb-configs
# Default-Start:     S 3
# Default-Stop:
# Required-Start:    $local_fs wb-prepare
# Required-Stop:
# X-Start-Before:    networking
# Short-Description:  move config files to shared partition
# Description:        move config files to shared partition
### END INIT INFO

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="move config files to shared partition"
NAME=wb-configs
SCRIPTNAME=/etc/init.d/$NAME
DAEMON=/usr/bin/wb-watch-configs
PIDFILE=/var/run/wb-watch-configs.pid

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

STORAGE=/dev/mmcblk0
MNT=/mnt/data

wb_check_mounted()
{
    grep "$1" /proc/mounts 2>&1 >/dev/null
}

# Run mkfs.ext4 with custom options
# Args:
# - device file
# - label (optional)
wb_mkfs_ext4()
{
    local dev=$1
    local label=$2
    
    [[ -e "$dev" ]] || {
        log_failure_msg "Device $dev not found"
        return 1
    }

    log_action_begin_msg "Formatting $dev ($label)"
    yes | mkfs.ext4 -E stride=2,stripe-width=1024 -b 4096 -L "$label" "$dev"
    log_end_msg $?
}

wb_check_data()
{
    local data=${STORAGE}p6
    wb_check_mounted ${data} && {
        return 0
    }
    
    wb_mkfs_ext4 ${data} data || return $?
    mount ${data} $MNT || {
        log_failure_msg "Can't mount ${data}"
        return 1
    }
    return 0
}

wb_fix_data_file()
{
    local src_orig=$1
    local src=${1%/}
    local dst="$MNT${2:-$src}"

    # ensure that file in /mnt/data exists. if not, copy from rootfs.
    if [[ ! -e "$dst" ]]; then
        local f=''
        if [[ -f "${src}" || -d "${src}" ]]; then
            f="$src"
        elif [[ -e "${src}.default" ]]; then
            f="${src}.default"
        elif [[ -e "${src}.wb" ]]; then
            f="${src}.wb"
            rm -rf "${src}.default"
            ln -Tfs "$f" "${src}.default"
        elif [[ "${src_orig}" != "$src" ]]; then
            mkdir -p "$dst"
            f=$dst
        else
            echo "$src: unable to find file to fix broken state"
            return 1
        fi

        echo "$src: fixing with existing file $f"
        mkdir -p `dirname "$dst"`
        [[ -n "$nosavefiles" ]] && find "$f" -type f -delete
        cp -aH "$f" "$dst"

        # create backup if there isn't one
        if [[ ! -e "${src}.default" ]]; then
            echo "$src: saving backup to ${src}.default"
            cp -aH "$f" "${src}.default"
        fi
    fi
}

wb_move()
{
    wb_fix_data_file "$@" || return $?

    local src=${1%/}
    local dst="$MNT${2:-$src}"

    # is there an existing symlink?
    if [[ -h "$src" && -e "$src" ]]; then
        # it points to correct file?
        local f=`readlink -f "$src"`
        if [[ "$f" == "$dst" ]]; then
            [[ "$DEBUG" == "yes" ]] && echo "$src: good symlink, not touching"
            return 0
        fi
    fi

    echo "$src: symlinking to $dst"
    rm -rf "$src"
    ln -Tfs "$dst" "$src"
}

wb_move_nosavefiles()
{
    nosavefiles=1 wb_move "$@"
}

wb_move_bind()
{
    wb_fix_data_file "$@" || return $?

    local src=${1%/}
    local dst="$MNT${2:-$src}"
    echo "$src: binding to $dst"
    umount -f $src 2>&1 >/dev/null
    if [[ -d "$dst" && ! -d "$src" ]]; then
        rm -rf "$src"
        mkdir "$src"
    fi
    if [[ -f "$dst" && ! -f "$src" ]]; then
        rm -f "$src"
        touch "$src"
    fi
    mount --bind "$dst" "$src"
}

wb_move_bind_nosavefiles()
{
    nosavefiles=1 wb_move_bind "$@"
}

WB_WATCH_FILES=()

wb_move_watch()
{
    wb_fix_data_file "$@" || return $?

    local src=$1
    local dst="$MNT${2:-$src}"

    [[ ! -f "$src" || -h "$src" ]] && rm "$src"
    diff -q "$src" "$dst" >/dev/null 2>&1 || {
        echo "$src: copying from $dst"
        cp -aH "$dst" "$src"
    }

    [[ "$DEBUG" == "yes" ]] && echo "$src: watching for changes"
    WB_WATCH_FILES+=("$src")
}

#
# Function that starts the daemon/service
#

do_start()
{
    echo
    wb_check_data || {
        log_warning_msg "$MNT not mounted, skipping symlinks check"
        return 1
    }

    local md5_interfaces=`md5sum /etc/network/interfaces`

    log_action_msg "Checking symlinks to $MNT"
    for item in /etc/wb-configs.d/*; do
        grep -q '\.dpkg-old$' <<< "$item" && continue
        source "$item"
    done

    start-stop-daemon --start --quiet --pidfile $PIDFILE --background --no-close --startas $DAEMON --test &&
    start-stop-daemon --start --quiet --pidfile $PIDFILE --background --no-close --exec $DAEMON -- ${WB_WATCH_FILES[@]} ||
        log_warning_msg "Unable to start $DAEMON"

    return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
    return 0;

}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	 exit 0;
	;;


  *)
	echo "Usage: $SCRIPTNAME {start|stop|status}" >&2
	exit 3
	;;
esac

:
